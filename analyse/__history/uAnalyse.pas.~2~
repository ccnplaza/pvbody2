unit uAnalyse;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, cxGraphics, cxControls, cxLookAndFeels, cxLookAndFeelPainters,
  cxContainer, cxEdit, dxSkinsCore, dxSkinBlack, dxSkinBlue, dxSkinBlueprint,
  dxSkinCaramel, dxSkinCoffee, dxSkinDarkRoom, dxSkinDarkSide,
  dxSkinDevExpressDarkStyle, dxSkinDevExpressStyle, dxSkinFoggy,
  dxSkinGlassOceans, dxSkinHighContrast, dxSkiniMaginary, dxSkinLilian,
  dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMoneyTwins,
  dxSkinOffice2007Black, dxSkinOffice2007Blue, dxSkinOffice2007Green,
  dxSkinOffice2007Pink, dxSkinOffice2007Silver, dxSkinOffice2010Black,
  dxSkinOffice2010Blue, dxSkinOffice2010Silver, dxSkinPumpkin, dxSkinSeven,
  dxSkinSevenClassic, dxSkinSharp, dxSkinSharpPlus, dxSkinSilver,
  dxSkinSpringTime, dxSkinStardust, dxSkinSummer2008, dxSkinTheAsphaltWorld,
  dxSkinsDefaultPainters, dxSkinValentine, dxSkinVS2010, dxSkinWhiteprint,
  dxSkinXmas2008Blue, cxStyles, dxSkinscxPCPainter, cxCustomData, cxFilter,
  cxData, cxDataStorage, cxNavigator, DB, cxDBData, cxTextEdit, Menus, MemDS,
  DBAccess, Uni, UniProvider, InterBaseUniProvider,
  StdCtrls, cxButtons, cxCheckBox, cxGridLevel, cxGridCustomTableView,
  cxGridTableView, cxGridDBTableView, cxClasses, cxGridCustomView, cxGrid,
  Buttons, cxGroupBox, ExtCtrls, cxPCdxBarPopupMenu, cxPC,
  ComCtrls, cxMaskEdit, cxSpinEdit, Registry, imageen,
  cxImage, cxMemo, cxDBEdit, cxLabel, cxDBLabel, ShellAPI,
  imageenview, ievect, ieview, iemview, ieopensavedlg, hyieutils, imageenio, imageenproc,
  VirtualTable, DBClient, Provider, ImgList, ActnList, dxSkinOffice2013White,
  UfrmImageEditor2, dxSkinMetropolis, dxSkinMetropolisDark,
  dxSkinOffice2013DarkGray, dxSkinOffice2013LightGray, WinInet,
  cxCalendar, cxDBLookupComboBox;

type
  TfmAnalyse = class(TForm)
    pnlThumbnail: TPanel;
    ImageEnMView: TImageEnMView;
    pnlTopClient: TPanel;
    pnlMember: TPanel;
    cxGroupBox1: TcxGroupBox;
    cxGrid1: TcxGrid;
    gridCheck: TcxGridDBTableView;
    gridCheckColumn1: TcxGridDBColumn;
    gridCheckUID: TcxGridDBColumn;
    gridCheckCUST_UID: TcxGridDBColumn;
    gridCheckPICTURE_DATE: TcxGridDBColumn;
    gridCheckPIC_CNT: TcxGridDBColumn;
    cxL1: TcxGridLevel;
    cxGroupBox2: TcxGroupBox;
    Panel10: TPanel;
    Panel11: TPanel;
    pnlName: TPanel;
    pnlNo: TPanel;
    OpenImageEnDialog1: TOpenImageEnDialog;
    pnlProcess: TPanel;
    lblCount: TLabel;
    lblMessage: TLabel;
    SaveImageEnDialog1: TSaveImageEnDialog;
    PopupThumb: TPopupMenu;
    N1: TMenuItem;
    N2: TMenuItem;
    N4: TMenuItem;
    ActionThumbnail: TActionList;
    actThumbWindowMax: TAction;
    actThumbWindowMin: TAction;
    actThumbDelete: TAction;
    actThumbSaveAs: TAction;
    ImageListThumbnail: TImageList;
    SaveImageEnDialog2: TSaveImageEnDialog;
    ActSaveDrawing: TAction;
    ActClearScreen: TAction;
    ActSaveImage: TAction;
    ActSaveSetting: TAction;
    PopupMenu1: TPopupMenu;
    N5: TMenuItem;
    N6: TMenuItem;
    N7: TMenuItem;
    N8: TMenuItem;
    PanelComment: TPanel;
    CUSTOMER_IMAGE_DESCRIPT_SEL: TUniStoredProc;
    dsCUSTOMER_IMAGE_DESCRIPT_SEL: TDataSource;
    CUSTOMER_IMAGE_DESCRIPT_SELID: TIntegerField;
    CUSTOMER_IMAGE_DESCRIPT_SELID_NO: TIntegerField;
    Panel2: TPanel;
    gridDescript: TcxGridDBTableView;
    cxGrid2Level1: TcxGridLevel;
    cxGrid2: TcxGrid;
    gridDescriptID: TcxGridDBColumn;
    gridDescriptID_NO: TcxGridDBColumn;
    gridDescriptDESCRIPT_NAME: TcxGridDBColumn;
    btnAdd: TBitBtn;
    btnEdit: TBitBtn;
    btnDel: TBitBtn;
    CUSTOMER_IMAGE_DESCRIPT_INS: TUniStoredProc;
    btnComments: TBitBtn;
    CUSTOMER_IMAGE_DESCRIPT_UPD: TUniStoredProc;
    CUSTOMER_IMAGE_COMMENT_SEL: TUniStoredProc;
    dsCUSTOMER_IMAGE_COMMENT_SEL: TDataSource;
    CUSTOMER_IMAGE_COMMENT_INS: TUniStoredProc;
    CUSTOMER_IMAGE_COMMENT_UPD: TUniStoredProc;
    CUSTOMER_IMAGE_COMMENT_SELID: TIntegerField;
    CUSTOMER_IMAGE_COMMENT_SELIMAGE_COMMET: TStringField;
    Label1: TLabel;
    btnCustInfo: TBitBtn;
    btnHistory: TBitBtn;
    Panel1: TPanel;
    btnPicView: TBitBtn;
    pnlBottom: TPanel;
    btnRefresh: TBitBtn;
    CUSTOMER_IMAGE_DESCRIPT_SELDESCRIPT_NAME: TIntegerField;
    frmImageEditor21: TfrmImageEditor2;
    btnFavorite: TBitBtn;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure gridCIQNoGetDisplayText(
      Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord;
      var AText: string);
    procedure cxGridQuestionNoGetDisplayText(Sender: TcxCustomGridTableItem;
      ARecord: TcxCustomGridRecord; var AText: string);
    procedure FormResize(Sender: TObject);
    procedure gridCheckColumn1GetDisplayText(Sender: TcxCustomGridTableItem;
      ARecord: TcxCustomGridRecord; var AText: string);
    procedure actThumbWindowMaxExecute(Sender: TObject);
    procedure actThumbWindowMinExecute(Sender: TObject);
    procedure actThumbDeleteExecute(Sender: TObject);
    procedure actThumbSaveAsExecute(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure ActSaveDrawingExecute(Sender: TObject);
    procedure pnlNameClick(Sender: TObject);
    procedure ImageEnMViewImageSelect(Sender: TObject; idx: Integer);
    procedure btnAddClick(Sender: TObject);
    procedure btnEditClick(Sender: TObject);
    procedure btnCommentsClick(Sender: TObject);
    procedure frmImageEditor21CheckBox1Click(Sender: TObject);
    procedure btnHistoryClick(Sender: TObject);
    procedure btnCustInfoClick(Sender: TObject);
    procedure gridCheckCellDblClick(Sender: TcxCustomGridTableView;
      ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
      AShift: TShiftState; var AHandled: Boolean);
    procedure btnPicViewClick(Sender: TObject);
    procedure gridCheckCellClick(Sender: TcxCustomGridTableView;
      ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
      AShift: TShiftState; var AHandled: Boolean);
    procedure btnRefreshClick(Sender: TObject);
    procedure gridDescriptStartDrag(Sender: TObject;
      var DragObject: TDragObject);
    procedure frmImageEditor21ImageEnVect1DragDrop(Sender, Source: TObject; X,
      Y: Integer);
    procedure btnFavoriteClick(Sender: TObject);
  private
    function GetPictureCount(check_id: string): integer;
    procedure ShowProcessMsg(msg, cnt_str: string; onoff: integer);
    procedure DisplayImage;
//    procedure UploadDrawToServer(image_id, image_name, user_compid : string);
//    procedure DownloadDrawToLocal(img_id, draw_url, local_folder : string);
    procedure deleteallfiles(dir: string);
    procedure RetrieveImageDescript;
    procedure RetrieveMemberInfo;
    { Private declarations }
  public
    { Public declarations }
    SELECTED_IMAGE_ID : string;
    CURRENT_MEMBER_UID : string;
    DRAG_ITEM_NAME : string;
  end;

var
  fmAnalyse: TfmAnalyse;
const
  RADIANS=57.29577951;

implementation

uses GlobalVar, UdmDBCommon, uMemberSelect, UfmAnalyseRequestSelect,
  UfmImageDescEdit, UfmComments, UfmCustomerHistory, uMemberEditView,
  UfmMemberPicture, uMemberFavorite;

{$R *.dfm}

Function CheckUrl(url:string) : boolean;
var
  hSession, hfile, hRequest: hInternet;
  dwindex,dwcodelen : dword;
  dwcode:array[1..20] of char;
  res : pchar;
begin
  if pos('http://',lowercase(url))=0 then
     url := 'http://'+url;
  Result := false;
  hSession := InternetOpen('InetURL:/1.0', INTERNET_OPEN_TYPE_PRECONFIG,nil, nil, 0);
  if assigned(hsession) then begin
    hfile := InternetOpenUrl(hsession, pchar(url), nil, 0, INTERNET_FLAG_RELOAD, 0);
    dwIndex  := 0;
    dwCodeLen := 10;
    HttpQueryInfo(hfile, HTTP_QUERY_STATUS_CODE, @dwcode, dwcodeLen, dwIndex);
    res := pchar(@dwcode);
    result:= (res ='200') or (res ='302');
    if assigned(hfile) then
      InternetCloseHandle(hfile);
    InternetCloseHandle(hsession);
  end;
end;

//procedure TfmAnalyse.DownloadDrawToLocal(img_id, draw_url, local_folder: string);
//begin
//  with WebCopy1.Items.Add do begin
//    FTPHost := '210.122.36.244';
//    FTPUserID := 'ftp_user';
//    FTPPassword := '@CcnSoft!@#';
//    URL := draw_url;
//    Protocol := wpFTP;
//    FileDate := Date;
//    CopyNewerOnly := false;
//    TargetDir := local_folder;
//    TargetFilename := img_id + '.iev';
//  end;
//  WebCopy1.Execute;
//end;

//procedure TfmAnalyse.UploadDrawToServer(image_id, image_name, user_compid: string);
//begin
//  with WebCopy1.Items.Add do begin
//    ftphost := '210.122.36.244';
//    ftpuserid := 'ftp_user';
//    ftppassword := '@CcnSoft!@#';
//    protocol := wpFtpUpload;
//    targetdir := '/posture_image/' + user_compid + '/';
//    targetfilename := image_id + '.iev';
//    url := image_name;
//  end;
//  WebCopy1.Execute;
//end;

procedure TfmAnalyse.FormActivate(Sender: TObject);
begin
  if (GLOVAL_MEMBER_UID <> '') then begin
    if (CURRENT_MEMBER_UID <> GLOVAL_MEMBER_UID) then begin
      RetrieveMemberInfo;
    end;
  end;
end;

procedure TfmAnalyse.pnlNameClick(Sender: TObject);
begin
  Screen.Cursor := crHourGlass;
  fmMemberSelect := TfmMemberSelect.Create(Self);
  try
    fmMemberSelect.ShowModal;
    if fmMemberSelect.ModalResult = mrOk then begin
      ShowProcessMsg('자료 추출중...', '', 1);
      RetrieveMemberInfo;
    end;
  finally
    fmMemberSelect.Free;
    ShowProcessMsg('', '', 0);
    Screen.Cursor := crDefault;
  end;
end;

procedure TfmAnalyse.RetrieveMemberInfo;
begin
  CURRENT_MEMBER_UID := GLOVAL_MEMBER_UID;
  pnlName.Caption := GLOVAL_MEMBER_NAME;
  pnlNo.Caption := GLOVAL_MEMBER_TEL;
  cxGroupBox2.Refresh;
  dmDBCommon.RetrieveMemberPicture(GLOVAL_MEMBER_UID);
  dmDBCommon.CreateMemberLocalPicture(GLOVAL_MEMBER_UID);
  if gridCheck.DataController.RecordCount > 0 then begin
    dmDBCommon.SelectLocalPictureByID(GLOVAL_CHECK_DATA_UID);
    dmDBCommon.RetrieveLocalThumbnails(ImageEnMView);
  end else begin
    ImageEnMView.Clear;
  end;
end;

procedure TfmAnalyse.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Action := caFree;
end;

procedure TfmAnalyse.frmImageEditor21CheckBox1Click(Sender: TObject);
begin
  PanelComment.Visible := frmImageEditor21.CheckBox1.Checked;
end;

procedure TfmAnalyse.frmImageEditor21ImageEnVect1DragDrop(Sender,
  Source: TObject; X, Y: Integer);
var
  str_val : string;
  rec_idx, col_idx, hobj, top, left : Integer;
  img_height : Integer;
begin
  hobj := frmImageEditor21.ImageEnVect1.AddNewObject;
  frmImageEditor21.ImageEnVect1.ObjKind[hobj] := iekTEXT;
  frmImageEditor21.ImageEnVect1.ObjName[hobj] := 'txt_body';
  frmImageEditor21.ImageEnVect1.ObjText[hobj] := DRAG_ITEM_NAME;
  frmImageEditor21.ImageEnVect1.ObjPenWidth[hobj] := 1;
  frmImageEditor21.ImageEnVect1.ObjLeft[hobj] := frmImageEditor21.ImageEnVect1.XScr2Bmp(X);
  frmImageEditor21.ImageEnVect1.ObjTop[hobj] := frmImageEditor21.ImageEnVect1.YScr2Bmp(Y);
  frmImageEditor21.ImageEnVect1.ObjPenStyle[hobj] := psClear;
  frmImageEditor21.ImageEnVect1.SetObjFont(hobj, frmImageEditor21.dlgFont1.Font);
  frmImageEditor21.ImageEnVect1.ObjTextAutoSize[hobj] := True;
  frmImageEditor21.ImageEnVect1.StretchTextRect(hobj);

  frmImageEditor21.colorLinePropertiesChange(self);
  frmImageEditor21.ImageEnVect1.UnSelAllObjects;
  frmImageEditor21.ImageEnVect1.AddSelObject(hobj);
end;

procedure TfmAnalyse.FormResize(Sender: TObject);
begin
  ImageEnMView.ThumbHeight := ImageEnMView.ClientHeight - 10;
  ImageEnMView.ThumbWidth := ImageEnMView.ClientHeight div 3;

  pnlProcess.Top := (Height div 4);
  pnlProcess.Left := (Width div 2) - (pnlProcess.Width div 2);
  pnlProcess.Update;
end;

procedure TfmAnalyse.ActSaveDrawingExecute(Sender: TObject);
var
  r : Integer;
  iStream, dStream : TMemoryStream;
  img_id, img_name, drw_name : string;
begin
  Screen.Cursor := crHourGlass;
  dStream := TMemoryStream.Create;
  try
    if (frmImageEditor21.ImageEnVect1.IEBitmap.IsEmpty = False) then begin
      r := ImageEnMView.SelectedImage;
      img_id := ImageEnMView.ImageFileName[r];
      frmImageEditor21.ImageEnVect1.SaveToStreamIEV(dStream);
      dStream.Position := 0;
      dmDBCommon.vtCustomerImage.Locate('id', img_id, []);
      dmDBCommon.vtCustomerImage.Edit;
      TBlobField(dmDBCommon.vtCustomerImage.FieldByName('draw_data')).LoadFromStream(dStream);
      dmDBCommon.vtCustomerImage.Post;
      dmDBCommon.vtCustomerImage.Refresh;

      dStream.Position := 0;
      dmDBCommon.NCUSTOMER_DRAW_UPD.ParamByName('id').Value := img_id;
      dmDBCommon.NCUSTOMER_DRAW_UPD.ParamByName('draw_data').LoadFromStream(dStream, ftBlob);
      dmDBCommon.NCUSTOMER_DRAW_UPD.ExecProc;

    end;
  finally
    dStream.Free;
    Screen.Cursor := crDefault;
  end;
end;

procedure TfmAnalyse.actThumbDeleteExecute(Sender: TObject);
var
  i, cnt : integer;
  img_id : string;
begin
  if ImageEnMView.ImageCount > 0 then begin
    i := ImageEnMView.SelectedImage;
    img_id := ImageEnMView.ImageFileName[i];
    dmDBCommon.dsCUSTOMER_IMAGE3_SEL.DataSet.Locate('id', img_id, []);
    if Application.MessageBox('선택한 자료를 삭제합니다.' + #13#10 + '삭제한 자료는 되살릴 수 없습니다.'
      + #13#10 + '삭제 할까요?', '자료삭제', MB_YESNO + MB_ICONWARNING) = IDYES then
    begin
      gridCheck.DataController.SaveBookmark;
      dmDBCommon.CUSTOMER_IMAGE3_DEL.ParamByName('id').Value := dmDBCommon.dsCUSTOMER_IMAGE3_SEL.DataSet.FieldByName('id').Value;
      dmDBCommon.CUSTOMER_IMAGE3_DEL.ExecProc;
      dmDBCommon.dsCUSTOMER_IMAGE3_SEL.DataSet.Refresh;
      cnt := dmDBCommon.dsCUSTOMER_IMAGE3_SEL.DataSet.RecordCount;

      dmDBCommon.PICTURE_DATA_UPD_COUNT.ParamByName('UID').Value := gridCheckUID.EditValue;
      dmDBCommon.PICTURE_DATA_UPD_COUNT.ParamByName('PIC_CNT').AsInteger := cnt;
      dmDBCommon.PICTURE_DATA_UPD_COUNT.ExecProc;
      dmDBCommon.d_picture_data.DataSet.Refresh;
      gridCheck.DataController.GotoBookmark;

      dmDBCommon.RetrieveThumbnails(ImageEnMView);
    end;
  end;
end;

procedure TfmAnalyse.actThumbSaveAsExecute(Sender: TObject);
var
  fname, img_id : string;
  i : integer;
  memStream : TMemoryStream;
begin
  if SaveImageEnDialog1.Execute then begin
    fname := SaveImageEnDialog1.FileName;
    i := ImageEnMView.SelectedImage;
    img_id := ImageEnMView.ImageFileName[i];
    dmDBCommon.dsCUSTOMER_IMAGE3_SEL.DataSet.Locate('id', img_id, []);
    memStream := TMemoryStream.Create;
    TBlobField(dmDBCommon.dsCUSTOMER_IMAGE3_SEL.DataSet.FieldByName('IMAGE_DATA')).SaveToStream(memStream);
    memStream.Position := 0;
    memStream.SaveToFile(fname);
    memStream.Free;
  end;
end;

procedure TfmAnalyse.actThumbWindowMaxExecute(Sender: TObject);
begin
  pnlThumbnail.Height := 190;
end;

procedure TfmAnalyse.actThumbWindowMinExecute(Sender: TObject);
begin
  pnlThumbnail.Height := 60;
end;

procedure TfmAnalyse.btnAddClick(Sender: TObject);
var
  idno : Integer;
begin
  fmImageDescEdit := TfmImageDescEdit.Create(Self);
  try
    idno := gridDescript.DataController.RecordCount + 1;
    fmImageDescEdit.edtNo.Text := IntToStr(idno);
    fmImageDescEdit.ShowModal;
    if fmImageDescEdit.ModalResult = mrOk then begin
      CUSTOMER_IMAGE_DESCRIPT_INS.ParamByName('IMAGE_ID').Value := SELECTED_IMAGE_ID;
      CUSTOMER_IMAGE_DESCRIPT_INS.ParamByName('ID_NO').Value := StrToInt(fmImageDescEdit.edtNo.Text);
      CUSTOMER_IMAGE_DESCRIPT_INS.ParamByName('DESCRIPT_NAME').Value := fmImageDescEdit.edtDesc.EditValue;
      CUSTOMER_IMAGE_DESCRIPT_INS.ExecProc;
      dsCUSTOMER_IMAGE_DESCRIPT_SEL.DataSet.Refresh;
    end;
  finally
    fmImageDescEdit.Free;
  end;
end;

procedure TfmAnalyse.btnCommentsClick(Sender: TObject);
var
  cnt : Integer;
  comment_id : Integer;
begin
  fmComments := TfmComments.Create(Self);
  try
    CUSTOMER_IMAGE_COMMENT_SEL.ParamByName('IMAGE_ID').Value := SELECTED_IMAGE_ID;
    CUSTOMER_IMAGE_COMMENT_SEL.Active := True;
    dsCUSTOMER_IMAGE_COMMENT_SEL.DataSet.Refresh;
    comment_id := CUSTOMER_IMAGE_COMMENT_SELID.Value;
    if comment_id > 0 then begin
      fmComments.Memo1.Text := CUSTOMER_IMAGE_COMMENT_SELIMAGE_COMMET.Value;
    end else begin
      fmComments.Memo1.Text := '';
    end;
    fmComments.ShowModal;
    if fmComments.ModalResult = mrOk then begin
      if comment_id > 0 then begin //edit...
        CUSTOMER_IMAGE_COMMENT_UPD.ParamByName('ID').Value := comment_id;
        CUSTOMER_IMAGE_COMMENT_UPD.ParamByName('IMAGE_COMMET').Value := fmComments.Memo1.Text;
        CUSTOMER_IMAGE_COMMENT_UPD.ExecProc;
      end else begin   //insert...
        CUSTOMER_IMAGE_COMMENT_INS.ParamByName('IMAGE_ID').Value := SELECTED_IMAGE_ID;
        CUSTOMER_IMAGE_COMMENT_INS.ParamByName('IMAGE_COMMET').Value := fmComments.Memo1.Text;
        CUSTOMER_IMAGE_COMMENT_INS.ExecProc;
      end;
    end;
  finally
    fmComments.Free;
  end;
end;

procedure TfmAnalyse.btnCustInfoClick(Sender: TObject);
begin
  if GLOVAL_MEMBER_UID = '' then begin
    ShowMessage('회원을 선택하세요.');
    Exit;
  end;
  fmMemberEditView := TfmMemberEditView.Create(Self);
  try
    fmMemberEditView.ShowModal;
  finally
    fmMemberEditView.Free;
  end;
end;

procedure TfmAnalyse.btnEditClick(Sender: TObject);
var
  idno : Integer;
begin
  fmImageDescEdit := TfmImageDescEdit.Create(Self);
  try
    idno := gridDescriptID_NO.EditValue;
    fmImageDescEdit.edtNo.Text := IntToStr(idno);
    fmImageDescEdit.edtDesc.EditValue := gridDescriptDESCRIPT_NAME.EditValue;
    fmImageDescEdit.ShowModal;
    if fmImageDescEdit.ModalResult = mrOk then begin
      CUSTOMER_IMAGE_DESCRIPT_UPD.ParamByName('ID').Value := gridDescriptID.EditValue;
      CUSTOMER_IMAGE_DESCRIPT_UPD.ParamByName('ID_NO').Value := StrToInt(fmImageDescEdit.edtNo.Text);
      CUSTOMER_IMAGE_DESCRIPT_UPD.ParamByName('DESCRIPT_NAME').Value := fmImageDescEdit.edtDesc.EditValue;
      CUSTOMER_IMAGE_DESCRIPT_UPD.ExecProc;
      dsCUSTOMER_IMAGE_DESCRIPT_SEL.DataSet.Refresh;
    end;
  finally
    fmImageDescEdit.Free;
  end;
end;

procedure TfmAnalyse.btnFavoriteClick(Sender: TObject);
begin
  fmMemberFavorite := TfmMemberFavorite.Create(Self);
  try
    fmMemberFavorite.ShowModal;
    if fmMemberFavorite.ModalResult = mrOk then begin
      ShowProcessMsg('자료 추출중...', '', 1);
      RetrieveMemberInfo;
    end;
  finally
    fmMemberFavorite.Free;
    ShowProcessMsg('', '', 0);
    Screen.Cursor := crDefault;
  end;
end;

procedure TfmAnalyse.btnHistoryClick(Sender: TObject);
begin
  if GLOVAL_MEMBER_UID = '' then begin
    ShowMessage('회원을 선택하세요.');
    Exit;
  end;
  fmCustomerHistory := TfmCustomerHistory.Create(Self);
  try
    fmCustomerHistory.CustomerID := GLOVAL_MEMBER_UID;
    fmCustomerHistory.ShowModal;
  finally
    fmCustomerHistory.Free;
  end;
end;

procedure TfmAnalyse.btnPicViewClick(Sender: TObject);
var
  i, idx, cnt : integer;
begin
  fmMemberPicture := TfmMemberPicture.Create(Self);
  try
    cnt := ImageEnMView.ImageCount;
    for i := 0 to cnt - 1 do begin
      idx := fmMemberPicture.ImageEnMView.AppendImage;
      fmMemberPicture.ImageEnMView.SetIEBitmap(idx, ImageEnMView.GetTIEBitmap(i));
    end;
    fmMemberPicture.ShowModal;
    if fmMemberPicture.ModalResult = mrOk then begin
      ImageEnMViewImageSelect(Sender, fmMemberPicture.ImageIndex);
    end;
  finally
    fmMemberPicture.Free;
  end;
end;

procedure TfmAnalyse.btnRefreshClick(Sender: TObject);
begin
  RetrieveMemberInfo;
end;

procedure TfmAnalyse.gridCIQNoGetDisplayText(
  Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord;
  var AText: string);
begin
  AText := IntToStr(Sender.GridView.Controller.TopRecordIndex + ARecord.ViewInfo.Index+1);
end;

procedure TfmAnalyse.gridDescriptStartDrag(Sender: TObject;
  var DragObject: TDragObject);
begin
  GDragObject := 2;
  GDragText := gridDescript.DataController.GetDisplayText
    (gridDescript.DataController.GetFocusedRecordIndex, gridDescript.GetColumnByFieldName('DESCRIPT_NAME').Index);
end;

procedure TfmAnalyse.cxGridQuestionNoGetDisplayText(
  Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord;
  var AText: string);
begin
  AText := IntToStr(Sender.GridView.Controller.TopRecordIndex + ARecord.ViewInfo.Index+1);
end;

procedure TfmAnalyse.gridCheckCellClick(Sender: TcxCustomGridTableView;
  ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
  AShift: TShiftState; var AHandled: Boolean);
begin
  dmDBCommon.SelectLocalPictureByID(gridCheckUID.EditValue);
  dmDBCommon.RetrieveLocalThumbnails(ImageEnMView);
end;

procedure TfmAnalyse.gridCheckCellDblClick(Sender: TcxCustomGridTableView;
  ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
  AShift: TShiftState; var AHandled: Boolean);
begin
  btnPicView.Click;
end;

procedure TfmAnalyse.gridCheckColumn1GetDisplayText(
  Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord;
  var AText: string);
begin
  AText := IntToStr(Sender.GridView.Controller.TopRecordIndex + ARecord.ViewInfo.Index+1);
end;

procedure TfmAnalyse.ImageEnMViewImageSelect(Sender: TObject; idx: Integer);
var
  draw_stream : TMemoryStream;
begin
  Screen.Cursor := crHourGlass;
  SELECTED_IMAGE_ID := ImageEnMView.ImageFileName[idx];
  frmImageEditor21.OpenImageByID(SELECTED_IMAGE_ID);
  RetrieveImageDescript;
  Screen.Cursor := crDefault;
end;

procedure TfmAnalyse.RetrieveImageDescript;
begin
  CUSTOMER_IMAGE_DESCRIPT_SEL.ParamByName('IMG_ID').Value := SELECTED_IMAGE_ID;
  CUSTOMER_IMAGE_DESCRIPT_SEL.Active := True;
  dsCUSTOMER_IMAGE_DESCRIPT_SEL.DataSet.Refresh;
end;

procedure TfmAnalyse.DisplayImage;
var
  idx, img_width, fontsize : integer;
  image_stream, draw_stream : TMemoryStream;
  img_id : string;
begin
  Screen.Cursor := crHourGlass;
  image_stream := TMemoryStream.Create;
  draw_stream := TMemoryStream.Create;
  try
    idx := ImageEnMView.SelectedImage;
    img_id := ImageEnMView.ImageFileName[idx];

    dmDBCommon.dsCUSTOMER_IMAGE3_SEL.DataSet.Locate('id', img_id, []);
    TBlobField(dmDBCommon.dsCUSTOMER_IMAGE3_SEL.DataSet.FieldByName('image_data')).SaveToStream(image_stream);
    TBlobField(dmDBCommon.dsCUSTOMER_IMAGE3_SEL.DataSet.FieldByName('draw_data')).SaveToStream(draw_stream);
    image_stream.Position := 0;
    draw_stream.Position := 0;
    frmImageEditor21.OpenImageStream(image_stream, draw_stream);

  finally
    image_stream.Free;
    draw_stream.Free;
    Screen.Cursor := crDefault;
  end;
end;

procedure TfmAnalyse.deleteallfiles(dir : string);
  var sl   : tstringlist;
      sr   : tsearchrec;
      i,mx : integer;
begin
  sl := tstringlist.create;
  try
    sl.clear;
    if findfirst(dir + '*.*', faAnyFile - faDirectory - faVolumeID, sr) = 0 then begin
      repeat
        sl.add(sr.name);
      until findnext(sr) <> 0;
      findclose(sr);
    end;
    mx := sl.count - 1;
    for i := 0 to mx do begin
      deletefile(dir + sl[i]);
    end;
  finally
    sl.free;
  end;
end;

function TfmAnalyse.GetPictureCount(check_id: string): integer;
var
  Qry : TUniQuery;
  cnt : Integer;
begin
  Qry := TUniQuery.Create(nil);
  Qry.Connection := dmDBCommon.UniDBConnection;
  with Qry do begin
    SQL.Clear;
    SQL.Add('select Count(*) as cnt from CUSTOMER_IMAGE3 ');
    SQL.Add('where check_id = :check_id ;');
    ParamByName('check_id').AsString := check_id;
    Active := True;
  end;
  cnt := Qry.FieldByName('cnt').AsInteger;
  if cnt >= 0 then
    Result := cnt + 1
  else
    Result := 1;
end;

procedure TfmAnalyse.ShowProcessMsg(msg, cnt_str: string; onoff: integer);
begin
  if onoff = 1 then begin
    lblMessage.Caption := msg;
    lblCount.Caption := cnt_str;
    pnlProcess.Visible := True;
    pnlProcess.Update;
  end else
    pnlProcess.Visible := False;
end;

initialization RegisterClasses([TfmAnalyse]);

end.
